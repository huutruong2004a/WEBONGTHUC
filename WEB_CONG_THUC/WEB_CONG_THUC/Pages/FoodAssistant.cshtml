    @page
    @model WEB_CONG_THUC.Pages.FoodAssistantModel
    @{
        ViewData["Title"] = "Trợ lý ẩm thực AI";
    Layout = "_MainLayout"; // Sử dụng layout mặc định
    }

    <style>
        .chat-container {
            max-width: 700px;
            margin: 20px auto;
            border: 1px solid #ddd;
            padding: 15px;
            border-radius: 8px;
        }

        .chat-history {
            height: 300px;
            border: 1px solid #eee;
            overflow-y: auto;
            padding: 10px;
            margin-bottom: 10px;
            background-color: #f9f9f9;
        }

        .chat-history .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 5px;
        }

        .chat-history .user-message {
            background-color: #d1ecf1;
            text-align: right;
            margin-left: auto;
            max-width: 70%;
        }

        .chat-history .assistant-message {
            background-color: #e2e3e5;
            text-align: left;
            margin-right: auto;
            max-width: 70%;
        }

        .input-group {
            display: flex;
        }

        .input-group input,
        .input-group textarea {
            flex-grow: 1;
            margin-right: 5px;
        }

        .section {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px dashed #ccc;
        }

        .recipe-details {
            border: 1px solid #eee;
            padding: 15px;
            margin-top: 10px;
            background-color: #f9f9f9;
            border-radius: 5px;
        }

        .recipe-details h4 {
            margin-top: 0;
        }

        .recipe-details ul,
        .recipe-details ol {
            padding-left: 20px;
        }
    </style>

    <h2>@ViewData["Title"]</h2>

    <div class="chat-container">
        <h4>Chat gợi ý món ăn</h4>
        <div class="chat-history" id="chatHistory">
            <!-- Tin nhắn sẽ được thêm vào đây -->
        </div>
        <div class="input-group mb-2">
            <textarea id="userInput" class="form-control"
                placeholder="Hỏi AI về món ăn hoặc dán URL YouTube để trích xuất công thức..." rows="1"
                style="resize: none; overflow-y: hidden;"></textarea>
            <button id="sendChatButton" class="btn btn-primary">Gửi</button>
        </div>
        <div class="action-buttons mb-2">
            <button id="suggestFoodButton" class="btn btn-outline-secondary btn-sm mr-1">Gợi ý món ăn</button>
            <button id="extractFromUrlButton" class="btn btn-outline-success btn-sm">Trích xuất từ URL</button>
        </div>
        <small class="form-text text-muted">Ví dụ: "Hôm nay trời lạnh, gợi ý món gì ngon?", hoặc dán URL video YouTube rồi
            nhấn "Trích xuất từ URL".</small>
    </div>

    <div id="recipeResultDisplay" style="margin-top: 20px;">
        <!-- Kết quả trích xuất công thức (nếu có) sẽ hiển thị ở đây, tách biệt khỏi chat history -->
    </div>


    @section Scripts {
        <script>
            let chatSessionId = null;

            const chatHistoryDiv = document.getElementById('chatHistory');
            const userInput = document.getElementById('userInput');
            const sendChatButton = document.getElementById('sendChatButton');
            const suggestFoodButton = document.getElementById('suggestFoodButton');
            const extractFromUrlButton = document.getElementById('extractFromUrlButton');
            const recipeResultDisplayDiv = document.getElementById('recipeResultDisplay'); // Div mới để hiển thị công thức

            function appendMessage(text, sender) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message', sender === 'user' ? 'user-message' : 'assistant-message');

                if (sender === 'assistant') {
                    // Replace newline characters with <br> for HTML rendering
                    const processedText = text.replace(/\n/g, '<br>');
                    messageDiv.innerHTML = processedText; // Use innerHTML to render <br>
                } else {
                    messageDiv.textContent = text;
                }

                chatHistoryDiv.appendChild(messageDiv);
                chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight; // Cuộn xuống tin nhắn mới nhất
            }

            async function handleChat() {
                const messageText = userInput.value.trim();
                if (!messageText) return;

                appendMessage(messageText, 'user');
                userInput.value = '';
                sendChatButton.disabled = true;

                try {
                    const response = await fetch('/api/FoodAssistant/suggest-food', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            sessionId: chatSessionId, // Gửi sessionId nếu có
                            userInput: messageText
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        chatSessionId = result.sessionId; // Lưu lại sessionId cho các lần chat tiếp theo
                        appendMessage(result.suggestion, 'assistant');
                    } else {
                        const errorText = await response.text();
                        appendMessage(`Lỗi từ AI: ${response.status} - ${errorText || 'Không thể nhận phản hồi.'}`, 'assistant');
                    }
                } catch (error) {
                    console.error('Error sending chat:', error);
                    appendMessage('Lỗi kết nối khi gửi tin nhắn.', 'assistant');
                }
                sendChatButton.disabled = false;
                userInput.focus();
            }

            async function sendMessageToServer(messageText, actionType = null) {
                if (!messageText && (actionType === 'getSuggestion' || actionType === 'extractRecipeViaUrl')) {
                    // If a button is clicked but input is empty, prompt user or handle as needed.
                    // For now, we can just return or show a small message.
                    if (!messageText && actionType === 'extractRecipeViaUrl') {
                        appendMessage("Vui lòng nhập URL video vào ô chat trước khi nhấn nút trích xuất.", "assistant");
                        return;
                    }
                    // For suggestions, an empty message might be okay if the intent is to get a generic suggestion.
                    // However, usually, some input is expected.
                }

                // If it's a general message submission (not from a specific button) and input is empty, return.
                if (!messageText && !actionType) return;

                appendMessage(messageText, 'user');
            
                // Log actionType and result of isPotentialYouTubeUrl
                console.log(`sendMessageToServer called with actionType: ${actionType}, messageText: "${messageText}"`);
                const isUrl = isPotentialYouTubeUrl(messageText);
                console.log(`isPotentialYouTubeUrl result: ${isUrl}`);

                // Show "Đang phân tích..." message if extracting recipe
                if (actionType === 'extractRecipeViaUrl' || (!actionType && isUrl)) {
                    console.log('Condition for "Đang phân tích..." met.'); // Log if condition is met
                    appendMessage("Đang phân tích video và trích xuất công thức, vui lòng chờ giây lát...", 'assistant');
                }

                userInput.value = '';
                sendChatButton.disabled = true;
                suggestFoodButton.disabled = true;
                extractFromUrlButton.disabled = true;
                recipeResultDisplayDiv.innerHTML = ''; // Xóa kết quả công thức cũ (nếu có)

                try {
                    const response = await fetch('/api/FoodAssistant/process-message', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            sessionId: chatSessionId,
                            userInput: messageText,
                            actionType: actionType
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        chatSessionId = result.sessionId;

                        if (result.responseType === 'recipeInfo') {
                            appendMessage("Đã trích xuất công thức từ video:", 'assistant');
                            displayRecipe(result.data, messageText); // messageText ở đây là URL video
                        } else if (result.responseType === 'suggestion') {
                            appendMessage(result.data, 'assistant');
                        } else if (result.responseType === 'error') {
                            appendMessage(result.data, 'assistant');
                        }
                    } else {
                        const errorText = await response.text();
                        appendMessage(`Lỗi: ${response.status} - ${errorText || 'Không thể nhận phản hồi.'}`, 'assistant');
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                    appendMessage('Lỗi kết nối khi gửi tin nhắn.', 'assistant');
                }
                sendChatButton.disabled = false;
                suggestFoodButton.disabled = false;
                extractFromUrlButton.disabled = false;
                userInput.focus();
            }

            function isPotentialYouTubeUrl(text) {
                if (!text) return false;
                const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)([\w-]+)/;
                return youtubeRegex.test(text.trim());
            }

            // Function to auto-resize textarea
            function autoResizeTextarea(textarea) {
                textarea.style.height = 'auto'; // Reset height to recalculate
                textarea.style.height = textarea.scrollHeight + 'px';
            }

            userInput.addEventListener('input', () => {
                autoResizeTextarea(userInput);
            });

            sendChatButton.addEventListener('click', () => {
                sendMessageToServer(userInput.value.trim());
            });

            userInput.addEventListener('keydown', function (event) { // Changed to keydown to better capture Shift
                if (event.key === 'Enter') {
                    if (event.shiftKey) {
                        // Allow default behavior (newline) if Shift is pressed
                        // For textarea, this means simply not preventing default and not sending message
                        autoResizeTextarea(userInput); // Adjust height after newline
                    } else {
                        event.preventDefault(); // Prevent newline in textarea if only Enter is pressed
                        sendMessageToServer(userInput.value.trim());
                    }
                }
            });

            suggestFoodButton.addEventListener('click', () => {
                sendMessageToServer(userInput.value.trim(), 'getSuggestion');
            });

            extractFromUrlButton.addEventListener('click', () => {
                sendMessageToServer(userInput.value.trim(), 'extractRecipeViaUrl');
            });

            function displayRecipe(recipe, videoUrl) { // Thêm videoUrl để dùng cho nút "Sử dụng công thức"
                console.log('Displaying recipe:', recipe);
                recipeResultDisplayDiv.innerHTML = ''; // Xóa nội dung cũ của div này

                if (!recipe || !recipe.DishName) {
                    const errorMsg = document.createElement('p');
                    errorMsg.classList.add('text-warning');
                    errorMsg.textContent = recipe && recipe.DishName === null ? "Không thể trích xuất tên món ăn." : "Không nhận được thông tin công thức hợp lệ.";
                    recipeResultDisplayDiv.appendChild(errorMsg);
                    return;
                }

                let html = '<div class="recipe-details">';
                html += `<h4>${recipe.DishName}</h4>`;

                if (recipe.PreparationTime) html += `<p><strong>Thời gian chuẩn bị:</strong> ${recipe.PreparationTime}</p>`;
                if (recipe.CookingTime) html += `<p><strong>Thời gian nấu:</strong> ${recipe.CookingTime}</p>`;
                if (recipe.Servings) html += `<p><strong>Khẩu phần:</strong> ${recipe.Servings}</p>`;

                if (recipe.Ingredients && recipe.Ingredients.length > 0) {
                    html += '<h5>Nguyên liệu:</h5><ul>';
                    recipe.Ingredients.forEach(ing => { html += `<li>${ing}</li>`; });
                    html += '</ul>';
                }

                if (recipe.Instructions && recipe.Instructions.length > 0) {
                    html += '<h5>Các bước thực hiện:</h5><ol>';
                    recipe.Instructions.forEach(step => { html += `<li>${step}</li>`; });
                    html += '</ol>';
                }
                html += '</div>';
                recipeResultDisplayDiv.innerHTML = html;

                const useRecipeButton = document.createElement('button');
                useRecipeButton.textContent = 'Sử dụng công thức này để tạo mới';
                useRecipeButton.classList.add('btn', 'btn-info', 'mt-2');
                useRecipeButton.onclick = function () {
                    const recipeToStore = { ...recipe, VideoUrl: videoUrl }; // Thêm VideoUrl vào đối tượng lưu trữ
                    sessionStorage.setItem('extractedRecipe', JSON.stringify(recipeToStore));
                    window.location.href = '/Recipes/Create';
                };
                recipeResultDisplayDiv.appendChild(useRecipeButton);
            }
        </script>
    }

