@page
@model WEB_CONG_THUC.Pages.FoodAssistantModel
@{
    ViewData["Title"] = "Trợ lý ẩm thực AI";
}

<style>
    .chat-container {
        max-width: 700px;
        margin: 20px auto;
        border: 1px solid #ddd;
        padding: 15px;
        border-radius: 8px;
    }

    .chat-history {
        height: 300px;
        border: 1px solid #eee;
        overflow-y: auto;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #f9f9f9;
    }

    .chat-history .message {
        margin-bottom: 10px;
        padding: 8px 12px;
        border-radius: 5px;
    }

    .chat-history .user-message {
        background-color: #d1ecf1;
        text-align: right;
        margin-left: auto;
        max-width: 70%;
    }

    .chat-history .assistant-message {
        background-color: #e2e3e5;
        text-align: left;
        margin-right: auto;
        max-width: 70%;
    }

    .input-group {
        display: flex;
    }

    .input-group input,
    .input-group textarea {
        flex-grow: 1;
        margin-right: 5px;
    }

    .section {
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px dashed #ccc;
    }

    .recipe-details {
        border: 1px solid #eee;
        padding: 15px;
        margin-top: 10px;
        background-color: #f9f9f9;
        border-radius: 5px;
    }

    .recipe-details h4 {
        margin-top: 0;
    }

    .recipe-details ul,
    .recipe-details ol {
        padding-left: 20px;
    }
</style>

<h2>@ViewData["Title"]</h2>

<div class="chat-container">
    <h4>Chat gợi ý món ăn</h4>
    <div class="chat-history" id="chatHistory">
        <!-- Tin nhắn sẽ được thêm vào đây -->
    </div>
    <div class="input-group">
        <input type="text" id="userInput" class="form-control" placeholder="Hỏi AI về món ăn..." />
        <button id="sendChatButton" class="btn btn-primary">Gửi</button>
    </div>
    <small class="form-text text-muted">Nhập câu hỏi ví dụ: "Hôm nay trời lạnh, gợi ý món gì ngon?", "Tôi muốn món chay
        cho bữa tối", "Gợi ý món tráng miệng từ quả bơ ít đường."</small>
</div>

<div class="section">
    <h4>Trích xuất công thức từ Video</h4>
    <div class="form-group">
        <label for="videoUrl">URL Video (YouTube, Facebook, etc.):</label>
        <input type="url" id="videoUrl" class="form-control" placeholder="Dán URL video vào đây" />
        <small class="form-text text-muted">Lưu ý: Chức năng tự động lấy transcript từ URL cần được bạn phát triển thêm.
            Hiện tại, vui lòng nhập transcript thủ công bên dưới.</small>
    </div>
    <div class="form-group">
        <label for="videoTranscript">Hoặc nhập nội dung Transcript (bản ghi lời thoại):</label>
        <textarea id="videoTranscript" class="form-control" rows="5"
            placeholder="Dán nội dung transcript video vào đây..."></textarea>
    </div>
    <button id="extractRecipeButton" class="btn btn-success">Trích xuất Công thức</button>

    <div id="recipeResult" style="margin-top: 20px;">
        <!-- Kết quả trích xuất công thức sẽ hiển thị ở đây -->
    </div>
</div>

@section Scripts {
    <script>
        let chatSessionId = null;

        const chatHistoryDiv = document.getElementById('chatHistory');
        const userInput = document.getElementById('userInput');
        const sendChatButton = document.getElementById('sendChatButton');

        const videoTranscriptInput = document.getElementById('videoTranscript');
        const extractRecipeButton = document.getElementById('extractRecipeButton');
        const recipeResultDiv = document.getElementById('recipeResult');
        const videoUrlInput = document.getElementById('videoUrl');

        function appendMessage(text, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', sender === 'user' ? 'user-message' : 'assistant-message');
            messageDiv.textContent = text;
            chatHistoryDiv.appendChild(messageDiv);
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight; // Cuộn xuống tin nhắn mới nhất
        }

        async function handleChat() {
            const messageText = userInput.value.trim();
            if (!messageText) return;

            appendMessage(messageText, 'user');
            userInput.value = '';
            sendChatButton.disabled = true;

            try {
                const response = await fetch('/api/FoodAssistant/suggest-food', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        sessionId: chatSessionId, // Gửi sessionId nếu có
                        userInput: messageText
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    chatSessionId = result.sessionId; // Lưu lại sessionId cho các lần chat tiếp theo
                    appendMessage(result.suggestion, 'assistant');
                } else {
                    const errorText = await response.text();
                    appendMessage(`Lỗi từ AI: ${response.status} - ${errorText || 'Không thể nhận phản hồi.'}`, 'assistant');
                }
            } catch (error) {
                console.error('Error sending chat:', error);
                appendMessage('Lỗi kết nối khi gửi tin nhắn.', 'assistant');
            }
            sendChatButton.disabled = false;
            userInput.focus();
        }

        sendChatButton.addEventListener('click', handleChat);
        userInput.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                handleChat();
            }
        });

        extractRecipeButton.addEventListener('click', async () => {
            let transcript = videoTranscriptInput.value.trim();
            const videoUrl = videoUrlInput.value.trim();
            let proceedWithExtraction = false;

            recipeResultDiv.innerHTML = ''; // Xóa kết quả cũ
            extractRecipeButton.disabled = true;

            if (videoUrl && !transcript) {
                recipeResultDiv.innerHTML = '<p>Đang lấy transcript từ URL YouTube...</p>';
                try {
                    const transcriptResponse = await fetch('/api/FoodAssistant/get-transcript', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ videoUrl: videoUrl })
                    });

                    if (transcriptResponse.ok) {
                        const result = await transcriptResponse.json();
                        videoTranscriptInput.value = result.transcript; // Điền transcript vào ô
                        transcript = result.transcript; // Cập nhật biến transcript
                        proceedWithExtraction = true;
                        recipeResultDiv.innerHTML = '<p class="text-success">Đã lấy transcript thành công. Đang trích xuất công thức...</p>';
                    } else {
                        const errorText = await transcriptResponse.text();
                        recipeResultDiv.innerHTML = `<p class="text-danger">Lỗi khi lấy transcript: ${transcriptResponse.status} - ${errorText || 'Không thể lấy transcript từ URL.'}</p>`;
                        extractRecipeButton.disabled = false;
                        return;
                    }
                } catch (error) {
                    console.error('Error fetching transcript from URL:', error);
                    recipeResultDiv.innerHTML = '<p class="text-danger">Lỗi kết nối khi lấy transcript từ URL.</p>';
                    extractRecipeButton.disabled = false;
                    return;
                }
            } else if (transcript) {
                proceedWithExtraction = true;
                 recipeResultDiv.innerHTML = '<p>Đang trích xuất công thức từ transcript đã nhập...</p>';
            } else if (!videoUrl && !transcript) {
                 recipeResultDiv.innerHTML = '<p class="text-danger">Vui lòng nhập URL video hoặc nội dung transcript.</p>';
                 extractRecipeButton.disabled = false;
                 return;
            }

            if (!proceedWithExtraction || !transcript) {
                 if (proceedWithExtraction && !transcript) { // Trường hợp lấy transcript từ URL thành công nhưng transcript rỗng
                    recipeResultDiv.innerHTML = '<p class="text-warning">Transcript lấy được từ URL rỗng hoặc không hợp lệ. Không thể trích xuất công thức.</p>';
                 }
                 extractRecipeButton.disabled = false;
                 return;
            }
            
            // Tiếp tục với việc trích xuất công thức nếu có transcript
            try {
                const response = await fetch('/api/FoodAssistant/extract-recipe', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ videoTranscript: transcript })
                });

                if (response.ok) {
                    const recipe = await response.json();
                    let html = '<div class="recipe-details">';
                    html += `<h4>${recipe.dishName || 'Không có tên món'}</h4>`;

                    if (recipe.preparationTime) html += `<p><strong>Thời gian chuẩn bị:</strong> ${recipe.preparationTime}</p>`;
                    if (recipe.cookingTime) html += `<p><strong>Thời gian nấu:</strong> ${recipe.cookingTime}</p>`;
                    if (recipe.servings) html += `<p><strong>Khẩu phần:</strong> ${recipe.servings}</p>`;

                    if (recipe.ingredients && recipe.ingredients.length > 0) {
                        html += '<h5>Nguyên liệu:</h5><ul>';
                        recipe.ingredients.forEach(ing => { html += `<li>${ing}</li>`; });
                        html += '</ul>';
                    }

                    if (recipe.instructions && recipe.instructions.length > 0) {
                        html += '<h5>Các bước thực hiện:</h5><ol>';
                        recipe.instructions.forEach(step => { html += `<li>${step}</li>`; });
                        html += '</ol>';
                    }
                    html += '</div>';
                    recipeResultDiv.innerHTML = html;
                } else {
                    const errorText = await response.text();
                    recipeResultDiv.innerHTML = `<p class="text-danger">Lỗi trích xuất: ${response.status} - ${errorText || 'Không thể trích xuất công thức.'}</p>`;
                }
            } catch (error) {
                console.error('Error extracting recipe:', error);
                recipeResultDiv.innerHTML = '<p class="text-danger">Lỗi kết nối khi trích xuất công thức.</p>';
            }
            extractRecipeButton.disabled = false;
        });

    </script>
}