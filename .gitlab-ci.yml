deploy_to_plesk_branch:
  stage: deploy_to_plesk_branch
  image: alpine/git:latest
  only:
    - develop
  before_script:
    - echo "Starting SSH agent setup..."
    - |
      if [ -z "${SSH_PRIVATE_KEY}" ]; then
        echo "LỖI: Biến SSH_PRIVATE_KEY (loại File) chưa được thiết lập trong CI/CD Variables."
        exit 1
      elif [ ! -f "${SSH_PRIVATE_KEY}" ]; then
        echo "LỖI: Biến SSH_PRIVATE_KEY được thiết lập nhưng không trỏ tới một file hợp lệ."
        echo "Hãy đảm bảo bạn đã chọn Type là 'File' cho biến SSH_PRIVATE_KEY."
        exit 1
      fi
    - eval $(ssh-agent -s)
    - chmod 600 "${SSH_PRIVATE_KEY}"
    - ssh-add "${SSH_PRIVATE_KEY}"
    - echo "Configuring SSH known_hosts..."
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - |
      if [ -n "${SSH_KNOWN_HOSTS}" ]; then
        echo "${SSH_KNOWN_HOSTS}" > ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        echo "SSH known_hosts configured."
      else
        echo "CẢNH BÁO: Biến SSH_KNOWN_HOSTS không được thiết lập."
        # Tùy chọn xử lý nếu không có SSH_KNOWN_HOSTS
      fi
  script:
    - echo "Configuring Git user..."
    - git config --global user.name "GitLab CI/CD Deployer"
    - git config --global user.email "gitlab-ci@${CI_SERVER_HOST}"
    - echo "Cloning repository to a temporary directory using SSH:"
    - echo "URL: ${GIT_SSH_REPO_URL}"
    - rm -rf deploy_temp_repo
    - mkdir deploy_temp_repo
    - cd deploy_temp_repo
    - echo "Cloning deploy branch or initializing new one..."
    - git clone --depth 1 "${GIT_SSH_REPO_URL}" .
    - git checkout -B "${PLESK_DEPLOY_BRANCH}"
    - echo "Cleaning existing files in deploy branch (except .git folder)..."
    # Sử dụng một cách dọn dẹp khác để tránh lỗi cú pháp tiềm ẩn với ls và xargs
    - find . -maxdepth 1 -mindepth 1 ! -name '.git' -exec rm -rf {} \; || true
    - echo "Copying published artifacts from ../${BUILD_OUTPUT_DIR} ..."
    - cp -r "../${BUILD_OUTPUT_DIR}/." .
    - echo "Adding changes and committing..."
    - git add .
    - |
      if git diff --staged --quiet; then
        echo "Không có thay đổi nào để commit."
      else
        git commit -m "CI/CD: Auto-deploying build from $CI_COMMIT_SHORT_SHA (via SSH)"
      fi
    - echo "Pushing to ${PLESK_DEPLOY_BRANCH} branch using SSH..."
    - git push -f "${GIT_SSH_REPO_URL}" "${PLESK_DEPLOY_BRANCH}"
  dependencies:
    - build