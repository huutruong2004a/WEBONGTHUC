stages:
  - build
  - deploy_to_plesk_branch

variables:
  PROJECT_NAME: WEB_CONG_THUC
  BUILD_OUTPUT_DIR: publish_output

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:9.0 # Image để build dự án .NET 9
  script:
    - echo "Restoring NuGet packages for ${PROJECT_NAME}..."
    # KIỂM TRA KỸ ĐƯỜNG DẪN NÀY!
    # Nếu file .csproj của bạn là WEB_CONG_THUC/WEB_CONG_THUC.csproj
    # thì đổi thành: - dotnet restore "${PROJECT_NAME}/${PROJECT_NAME}.csproj"
    - dotnet restore "${PROJECT_NAME}/${PROJECT_NAME}/${PROJECT_NAME}.csproj"
    - echo "Building and publishing the project ${PROJECT_NAME}..."
    - dotnet publish "${PROJECT_NAME}/${PROJECT_NAME}/${PROJECT_NAME}.csproj" -c Release -o "${BUILD_OUTPUT_DIR}" --no-restore
  artifacts:
    paths:
      - "${BUILD_OUTPUT_DIR}/" # Lưu trữ output để job sau sử dụng
    expire_in: 1 hour

deploy_to_plesk_branch:
  stage: deploy_to_plesk_branch
  image:
    name: alpine/git:latest       # Sử dụng image chứa git
    entrypoint: ["/bin/sh", "-c"] # QUAN TRỌNG: Ghi đè entrypoint để các lệnh script được chạy bởi shell
  only:
    - develop # Chỉ chạy job này khi có commit lên nhánh develop
  script:
    # Các lệnh này giờ sẽ được thực thi bởi /bin/sh bên trong container alpine/git
    - echo "Configuring Git for deployment..."
    - git config --global user.name "GitLab CI/CD Deployer"
    - git config --global user.email "gitlab-ci@${CI_SERVER_HOST}" # Sử dụng biến môi trường của GitLab

    # Đảm bảo bạn đã tạo biến GITLAB_DEPLOY_TOKEN trong Settings > CI/CD > Variables của project trên GitLab
    # và nó có quyền write_repository.
    - DEPLOY_REPO_URL="https://gitlab-ci-token:${GITLAB_DEPLOY_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"

    - | # Kiểm tra xem GITLAB_DEPLOY_TOKEN có được thiết lập không
      if [ -z "${GITLAB_DEPLOY_TOKEN}" ]; then
        echo "LỖI: Biến GITLAB_DEPLOY_TOKEN chưa được thiết lập trong CI/CD Variables."
        echo "Vui lòng vào Settings > CI/CD > Variables của project để tạo."
        exit 1
      fi

    - echo "Cloning repository to a temporary directory..."
    - rm -rf deploy_temp_repo # Xóa thư mục tạm nếu đã tồn tại từ lần chạy trước
    - mkdir deploy_temp_repo
    - cd deploy_temp_repo

    - echo "Cloning deploy branch or initializing new one..."
    # Clone chỉ nhánh đích (nếu đã tồn tại) hoặc clone rỗng rồi tạo nhánh
    - git clone --depth 1 "${DEPLOY_REPO_URL}" . # Clone vào thư mục hiện tại (deploy_temp_repo)
    - git checkout -B plesk-deploy # Tạo nhánh mới 'plesk-deploy' hoặc chuyển sang nếu đã tồn tại

    - echo "Cleaning existing files in deploy branch (except .git folder)..."
    # Xóa tất cả các file và thư mục cũ TRỪ thư mục .git
    # ls -A liệt kê cả file ẩn (trừ . và ..), grep loại trừ .git, xargs rm -rf
    - ls -A | grep -v -E '^\.git$' | xargs rm -rf || true # || true để không lỗi nếu không có gì để xóa

    - echo "Copying published artifacts from ../${BUILD_OUTPUT_DIR} ..."
    # BUILD_OUTPUT_DIR được tạo ở job 'build' và nằm ngoài 'deploy_temp_repo'
    # Dấu / ở cuối BUILD_OUTPUT_DIR trong artifacts:paths có nghĩa là copy nội dung của thư mục đó
    # nên khi cp, ta dùng ../${BUILD_OUTPUT_DIR}/. (dấu . để copy tất cả nội dung vào thư mục hiện tại)
    - cp -r "../${BUILD_OUTPUT_DIR}/." .

    - echo "Adding changes and committing..."
    - git add .
    # Kiểm tra xem có thay đổi không trước khi commit
    - |
      if git diff --staged --quiet; then
        echo "Không có thay đổi nào để commit."
      else
        git commit -m "CI/CD: Auto-deploying build from $CI_COMMIT_SHORT_SHA"
      fi

    - echo "Pushing to plesk-deploy branch..."
    - git push -f "${DEPLOY_REPO_URL}" plesk-deploy


  dependencies:
    - build # Đảm bảo job này chạy sau và sử dụng artifacts từ job 'build'