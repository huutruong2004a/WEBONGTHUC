stages:
  - build
  - deploy_to_plesk_branch

variables:
  PROJECT_NAME: WEB_CONG_THUC
  BUILD_OUTPUT_DIR: publish_output
  # Thay thế YOUR_GITLAB_USERNAME_OR_GROUP bằng username hoặc group của bạn
  # Thay thế YOUR_PROJECT_NAME bằng tên project của bạn trên GitLab (thường là CI_PROJECT_NAME)
  # Ví dụ: GIT_REPO_URL: "https://gitlab-ci-token:${GITLAB_DEPLOY_TOKEN}@gitlab.com/your_group/your_project.git"
  GIT_REPO_URL: "https://gitlab-ci-token:${GITLAB_DEPLOY_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:9.0 # Sử dụng SDK 8.0, hoặc 7.0, 6.0 tùy dự án của bạn. 9.0 là preview.
  script:
    - echo "Restoring NuGet packages for ${PROJECT_NAME}..."
    # Giả sử cấu trúc thư mục của bạn là:
    # repo_root/
    #   WEB_CONG_THUC/ (thư mục chứa file .sln hoặc thư mục chính của project)
    #     WEB_CONG_THUC/ (thư mục chứa file .csproj)
    #       WEB_CONG_THUC.csproj
    # Nếu không phải, hãy điều chỉnh đường dẫn cho phù hợp.
    # Thông thường, đường dẫn đến .csproj sẽ đơn giản hơn, ví dụ: ${PROJECT_NAME}/${PROJECT_NAME}.csproj hoặc chỉ là ${PROJECT_NAME}.csproj nếu file .gitlab-ci.yml nằm cùng cấp với thư mục project.
    - dotnet restore "${PROJECT_NAME}/${PROJECT_NAME}/${PROJECT_NAME}.csproj"
    - echo "Building and publishing the project ${PROJECT_NAME}..."
    - dotnet publish "${PROJECT_NAME}/${PROJECT_NAME}/${PROJECT_NAME}.csproj" -c Release -o "${BUILD_OUTPUT_DIR}" --no-restore
  artifacts:
    paths:
      - "${BUILD_OUTPUT_DIR}/"
    expire_in: 1 hour

deploy_to_plesk_branch:
  stage: deploy_to_plesk_branch
  image: alpine/git:latest # Sử dụng image chuyên cho git, đã có sẵn git và các công cụ cơ bản
  # Hoặc nếu cần bash và coreutils:
  # image: alpine:latest
  # before_script:
  #   - apk add --no-cache git bash coreutils
  only:
    - develop # Chỉ chạy job này khi có commit lên nhánh develop
  script:
    - echo "Configuring Git for deployment..."
    - git config --global user.name "GitLab CI/CD Deployer"
    - git config --global user.email "gitlab-ci@${CI_SERVER_HOST}" # Sử dụng email động

    - echo "Cloning and preparing deploy branch..."
    # Tạo một thư mục tạm để clone repo, tránh xung đột với checkout của CI runner
    - mkdir deploy_temp_repo
    - cd deploy_temp_repo
    # Clone chỉ nhánh đích (nếu đã tồn tại) hoặc clone rỗng rồi tạo nhánh
    - git clone --depth 1 "${GIT_REPO_URL}" . # Clone vào thư mục hiện tại (deploy_temp_repo)
    - git checkout -B plesk-deploy # Tạo nhánh mới plesk-deploy hoặc switch sang nếu đã có

    - echo "Cleaning existing files in deploy branch (except .git folder)..."
    # Xóa tất cả các file và thư mục cũ TRỪ thư mục .git
    # Dùng ls -A để liệt kê cả file ẩn (trừ . và ..), grep -v '^\.git$' để loại trừ .git, rồi xargs rm -rf
    - ls -A | grep -v '^\.git$' | xargs rm -rf || true

    - echo "Copying published artifacts from ../${BUILD_OUTPUT_DIR} ..."
    # BUILD_OUTPUT_DIR được tạo ở job 'build' và nằm ngoài 'deploy_temp_repo'
    # Dấu / ở cuối BUILD_OUTPUT_DIR trong artifacts:paths có nghĩa là copy nội dung của thư mục đó
    # nên khi cp, ta dùng ../${BUILD_OUTPUT_DIR}/. (dấu . để copy tất cả nội dung)
    - cp -r "../${BUILD_OUTPUT_DIR}/." .

    - echo "Adding changes and committing..."
    - git add .
    # Kiểm tra xem có thay đổi không trước khi commit
    - |
      if git diff --staged --quiet; then
        echo "No changes to commit."
      else
        git commit -m "CI/CD: Auto-deploying build from $CI_COMMIT_SHORT_SHA"
      fi

    - echo "Pushing to plesk-deploy branch..."
    # Sử dụng biến GIT_REPO_URL đã định nghĩa
    - git push -f "${GIT_REPO_URL}" plesk-deploy
  dependencies:
    - build # Đảm bảo job này chạy sau và sử dụng artifacts từ job 'build'